pipeline {
    agent {
        docker {
            image 'dussim/build-env:jdk21_gradle-8.10_android-34'
            args '-v gradle-cache:/home/gradle/.gradle --net=host'
        }
    }
    stages {
        stage('Workflow') {
            steps {
                sh 'cat .jenkins/Jenkinsfile'
            }
        }
        stage('Gradle'){
            steps {
                sh 'gradle --version -Dorg.gradle.unsafe.isolated-projects=true'
                sh 'gradle --status -Dorg.gradle.unsafe.isolated-projects=true'
                sh 'gradle buildEnvironment -Dorg.gradle.unsafe.isolated-projects=true'
                sh 'gradle -q javaToolchains -Dorg.gradle.unsafe.isolated-projects=true'
            }
        }
        stage('Build') {
            steps {
                sh 'gradle :app:assembleInstalledAppDebug --scan -Dorg.gradle.unsafe.isolated-projects=true'
                recordIssues([
                        enabledForFailure: true,
                        tool             : kotlin()
                ])
                findBuildScans()
            }
        }
        stage('Quality') {
            steps {
                sh 'gradle ktlintCheck --no-build-cache --no-configuration-cache -Dorg.gradle.unsafe.isolated-projects=false'
                recordIssues([
                        enabledForFailure: true,
                        tool             : ktLint(pattern: '**/build/reports/ktlint/**/*.xml')
                ])
            }
        }
        stage('Versions') {
            steps {
                sh 'gradle dependencyUpdates --no-configure-on-demand --warning-mode=none --no-configuration-cache -Dorg.gradle.unsafe.isolated-projects=false'
            }
        }
    }
    post {
        success {
            echo 'Archiving artifacts'
            archiveArtifacts([
                    allowEmptyArchive: true,
                    artifacts        : 'app/build/outputs/apk/**/*.apk'
            ])
            archiveArtifacts([
                    allowEmptyArchive: true,
                    artifacts        : '.reports/**/*.html'
            ])
            archiveArtifacts([
                    allowEmptyArchive: true,
                    artifacts        : 'build/reports/**/*.html'
            ])
            publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: false,
                    keepAll              : false,
                    reportDir            : '.reports',
                    reportFiles          : '**/*.html',
                    reportName           : 'Aggregated Reports',
            ])
            publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: false,
                    keepAll              : false,
                    reportDir            : 'build/reports/',
                    reportFiles          : '**/*.html',
                    reportName           : 'Build Reports',
            ])
        }
    }
}